// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Slider /> should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Slider
    currentValue={0}
    max={10}
    min={0}
    onChange={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="sliderTrack"
          style={
            Object {
              "width": "-2%",
            }
          }
        />,
        <input
          className="slider"
          max={10}
          min={0}
          onChange={[MockFunction]}
          type="range"
          value={0}
        />,
      ],
      "className": "container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "sliderTrack",
          "style": Object {
            "width": "-2%",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "slider",
          "max": 10,
          "min": 0,
          "onChange": [MockFunction],
          "type": "range",
          "value": 0,
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="sliderTrack"
            style={
              Object {
                "width": "-2%",
              }
            }
          />,
          <input
            className="slider"
            max={10}
            min={0}
            onChange={[MockFunction]}
            type="range"
            value={0}
          />,
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "sliderTrack",
            "style": Object {
              "width": "-2%",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "slider",
            "max": 10,
            "min": 0,
            "onChange": [MockFunction],
            "type": "range",
            "value": 0,
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Slider /> should match snapshot 2`] = `"<div class=\\"container\\"><div class=\\"sliderTrack\\" style=\\"width:-2%\\"></div><input type=\\"range\\" min=\\"0\\" max=\\"10\\" value=\\"0\\" class=\\"slider\\"/></div>"`;
